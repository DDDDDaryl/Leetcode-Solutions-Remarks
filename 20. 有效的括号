#include <iostream>
#include <chrono>
#include <vector>

using namespace std;
using namespace chrono;
/* 大佬们的优化：
* 其实可以增加一个判断：如果栈的深度大于字符串长度的1/2，就返回false。因为当出现这种情况的时候，即使后面的全部匹配，栈也不会为空。
* 先增加一个字符串长度的奇偶判断 s.length()&1 ，奇数直接返回false
*/
class solution{
public:
    /*Bug: Ignored the case where pop appears before push.*/
    /*Bug: illegal reach of memory.*/
    static bool isValid(string s) {
        if(!s.empty()){
            if(*s.begin() == ')' || *s.begin() == ']' || *s.begin() == '}') return false;
            vector<char> stack;
            for(auto c:s){
                if(c == '[' || c == '(' || c == '{') stack.push_back(c);
                else if(c == ')'){
                    if(!stack.empty() && stack.back() == '(') stack.pop_back();
                    else return false;
                }
                else if(c == ']'){
                    if(!stack.empty() && stack.back() == '[') stack.pop_back();
                    else return false;
                }
                else if(c == '}'){
                    if(!stack.empty() && stack.back() == '{') stack.pop_back();
                    else return false;
                }
            }
            return stack.empty();
        }else return true;

    }
};

int main(){
    vector<int> nums{};
    vector<string> test = {
            "",
            "()[]{}",
            "()))",
            "((()",
            "([)]",
            "]"
    };
    auto start = system_clock::now();
    for(const auto &t:test) cout<<solution::isValid(t)<<endl;
    auto end = system_clock::now();
    auto duration =
            duration_cast<microseconds>(end-start);
    cout<<"Program spent "
        <<duration.count()
        <<" us"
        <<endl;
    return 0;
}

