#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include <deque>
#include <list>
#include <forward_list>
#include <array>
#include <stack>
#include <map>
#include <random>
using namespace std;
using namespace std::chrono;

/*给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:

输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]
进阶：

一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sort-colors
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/

/* Classic sort problem, where the items have only one feature: color.
 * Since there is no other feature, an unstable sort algorithm such as quicksort, is likely to work well.
 * Quicksort uses recursive solution.
 * Idea: shuffle->choose a partition item->separately sort both sides->choose another partition item->...
 * Optimize: Use the 3-way quicksort, since there are many duplicated keys.
 * Using one ptr to move through the array.*/

//First try: failed. Reason: infinite loop.
//To recursively call the quicksort, we need two static boundaries low and high,
//and two dynamic boundaries lt and gt, finally a pointer i to go through the array.
//Since i is initially on the right of lt, the current sort is over when i==gt.
class Solution {
public:
    static void sortColors(vector<int>& nums) {
        if(nums.empty()) return;
        auto seed = chrono::system_clock::now().time_since_epoch().count();
        shuffle(nums.begin(), nums.end(), default_random_engine(seed));
        threeWayQuicksort(nums, nums.begin(), --nums.end());
    }

private:
    static void threeWayQuicksort(vector<int>& shuffledNums, decltype(shuffledNums.begin()) lo, decltype(shuffledNums.end()) hi){
        if(hi <= lo) return;
        auto lt = lo;
        auto gt = hi;
        auto i = lt+1;
        int partitialItem = *lo;
        //i is on the right of lt.
        while(i <= gt) {
            if (*i < partitialItem) swap(*(i++), *(lt++));
            else if (*i > partitialItem) swap(*i, *gt--);
            else ++i;
        }
        //完成一次
        threeWayQuicksort(shuffledNums, lo, lt-1);
        threeWayQuicksort(shuffledNums, gt+1, hi);
   }
};

int main(){
    /*===========================Test case============================*/
    vector<vector<int>> test_case;
    test_case = {{},                    //empty
                 {0, 1, 2, 0, 2},
                 {2, 0, 2, 1, 1, 0},
                 {1, 2, 2, 2, 3, 4, 4, 2, 1, 5}};
    /*========================End test case===========================*/
    auto start = system_clock::now();
    /*============================API call============================*/
    for(auto test:test_case){

        cout<<"Original: ";
        for(auto item:test) cout<<item;
        cout<<endl<<"Sorted: ";
        Solution::sortColors(test);
        for(auto item:test) cout<<item;
        cout<<endl<<endl;
    }
    /*========================End of API call=========================*/
    auto end = system_clock::now();
    auto duration =
            duration_cast<microseconds>(end-start);
    cout<<"Program spent "
        <<duration.count()
        <<" us"
        <<endl;
    return 0;
}

